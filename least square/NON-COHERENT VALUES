import numpy as np

def non_coherent_mimo_radar(N, M, P_target, P_noise, P_target_arrival):
    # Generate random target and noise signals
    target_signal = np.random.normal(0, np.sqrt(P_target), (N, 1))
    noise_signal = np.random.normal(0, np.sqrt(P_noise), (M, 1))

    # Generate random channel matrix H
    H = np.random.randn(M, N) + 1j * np.random.randn(M, N)

    # Generate received signal
    received_signal = np.dot(H, target_signal) + noise_signal

    # Estimate target signal using least squares
    estimated_target_signal = np.linalg.lstsq(H, received_signal, rcond=None)[0]

    # Calculate SNR
    SNR = 10 * np.log10(np.sum(np.abs(target_signal)**2) / np.sum(np.abs(noise_signal)**2))

    # Calculate SNIR
    SNIR = 10 * np.log10(np.sum(np.abs(target_signal)**2) / np.sum(np.abs(estimated_target_signal - target_signal)**2))

    # Calculate probability of false detection
    P_false_detection = 1 - P_target_arrival

    # Probability of arrival
    P_arrival = 1 - P_false_detection

    return SNR, SNIR, P_false_detection, P_arrival

# Example usage
N = 4  # Number of transmit antennas
M = 4  # Number of receive antennas
P_target = 3  # Power of target signal
P_noise = 0.1  # Power of noise
P_target_arrival = 0.9  # Probability of target arrival

SNR, SNIR, P_false_detection, P_arrival = non_coherent_mimo_radar(N, M, P_target, P_noise, P_target_arrival)

print("SNR (dB):", SNR)
print("SNIR (dB):", SNIR)
print("Probability of false detection:", P_false_detection)
print("Probability of arrival:", P_arrival)
